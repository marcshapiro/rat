# - find (a, e) such that 1 <= abs(a) < 10, e:Int, and a*(10^e) = r
# - and convert to text: num(a) 'e' e '/' den(a)
use sys is_finite;
function (r);
if !is_finite(r) || 0 == r { return as_text(r); };

# normalize so 1 <= a
let s = if r < 0 { -1 } else { 1 }; # sign(r)
mutable a = r * s; # abs(r)
let c = a < 1; # reciprocal
if c { update a = 1 / a; };

# compute a, e
mutable e = 0; # exponent
loop {
    if a < 10 { break; };
    update a = a / 10;
    update e = e + 1;
};

# un-normalize
if c {
    update a = 1 / a;
    update e = -e;
};
update a = a * s;

# format result
let num = numerator(a);
let den = denominator(a);
mutable result = catenate(as_text(num), catenate('e', as_text(e)));
if 1 <> den {
        update result = catenate(result, catenate('/', as_text(den)));
};

# say(result);
result
