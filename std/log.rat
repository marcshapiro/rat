# natural logarithm
function log(xIn, eps);
if nan == xIn { return nan; };
if inf == xIn { return inf; };
if 1 == xIn { return 0; };
must(0 < xIn, 'log: only defined for positive values');

# I think this could be sped up by taking repeated square roots until
# the value is close to 1 (say 0.1 to 10).

let p = 1 - if 1 < xIn { 1/xIn } else { xIn };
# approx: y = -log(1-p)

mutable n = 1; # index
mutable pn = p; # p^n
mutable y = p; # result
mutable dy = 0; # change in y
mutable pdy = p; # previous dy
mutable r = 0; # dy/pdy

loop {
    update n = n + 1;
    update pn = pn * p;
    update dy = pn/n;
    update y = y + dy;

    update r = dy/pdy;
    if r < 1 {
        if dy*r/(1-r) <= eps { break; }; # no idea if this is legit
    };
    update pdy = dy;
};

if 1 < xIn { y } else { -y }
